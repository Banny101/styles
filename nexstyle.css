(function(d, t) {
  // Add stylesheet link
  var link = document.createElement('link');
  link.rel = 'stylesheet';
  link.type = 'text/css';
  link.href = 'https://banny101.github.io/styles/tech_animations.css'; // Your stylesheet URL
  document.head.appendChild(link);
  
  var v = d.createElement(t), s = d.getElementsByTagName(t)[0];
  v.onload = function() {
    import('https://banny101.github.io/styles/nexextensions.js').then(({ BrowserDataExtension }) => {
      window.voiceflow.chat.load({
        verify: { projectID: '6796fa7b639c4e49bca23356' },
        url: 'https://general-runtime.voiceflow.com',
        versionID: 'production',
        assistant: {
          persistence: 'memory',
          extensions: [ BrowserDataExtension ],
        }
      }).then(() => {
        window.voiceflow.chat.proactive.clear();
        setTimeout(function () {
          window.voiceflow.chat.proactive.push({
            type: "text",
            payload: { message: "ðŸ‘‹ Curious about AI conversational assistants?", },
          });
        }, 500);
        
        // Add matrix text effect
        const addMatrixEffect = () => {
          const messages = document.querySelectorAll('.vfrc-system-response .vfrc-message-text');
          messages.forEach(message => {
            if (!message.hasAttribute('data-matrix-applied')) {
              const text = message.textContent;
              message.textContent = '';
              message.setAttribute('data-matrix-applied', 'true');
              
              const span = document.createElement('span');
              message.appendChild(span);
              
              let i = 0;
              const typeWriter = setInterval(() => {
                if (i < text.length) {
                  span.textContent += text.charAt(i);
                  i++;
                } else {
                  clearInterval(typeWriter);
                }
              }, 30);
            }
          });
        };

        // Observer to watch for new messages
        const setupObserver = () => {
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.addedNodes.length) {
                setTimeout(addMatrixEffect, 100);
              }
            });
          });
          
          const config = { childList: true, subtree: true };
          observer.observe(document.body, config);
        };

        // Call setupObserver after the chat loads
        setTimeout(setupObserver, 1000);
      });
    });
  };
  v.src = "https://cdn.voiceflow.com/widget-next/bundle.mjs";
  v.type = "text/javascript";
  s.parentNode.insertBefore(v, s);
})(document, 'script');
